classdef Swimmer < handle
    
    properties
        xPos = 0;
        yPos = 0;
        dir = 0;
        Dr = 0;
        Dt = 0;
        v = 0;
        color = 0;
        vel = [0; 0; 0];
    end
    
    methods
        function obj = Swimmer(Dr, Dt, v, xyRange, color)
            
            obj.xPos = rand*xyRange;
            obj.yPos = rand*xyRange;
            obj.dir = rand*xyRange;
            obj.Dr = Dr;
            obj.Dt = Dt;
            obj.v = v;
            obj.color = color;
            
        end
        
        function newPos = Move(obj,dt)
            
            Wx = normrnd(0,1)/sqrt(dt);
            Wy = normrnd(0,1)/sqrt(dt);
            Wdir = normrnd(0,1)/sqrt(dt);
            
            dx = obj.v*cos(obj.dir)+sqrt(2*obj.Dt)*Wx;
            dy = obj.v*sin(obj.dir)+sqrt(2*obj.Dt)*Wy;
            dDir = sqrt(2*obj.Dr)*Wdir;
            
            obj.xPos = obj.xPos + dx*dt;
            obj.yPos = obj.yPos + dy*dt;
            obj.dir = obj.dir + dDir*dt;
            
            newPos = [obj.xPos obj.yPos];
            obj.vel = [dx; dy; 0]/norm([dx; dy; 0]);
        end
        
        function newPos = interact(obj, Tn, dt, xyRange)
            
            Wdir = normrnd(0,1)/sqrt(dt);
            dDir = Tn + sqrt(2*obj.Dr)*Wdir;
            obj.dir = obj.dir + dDir*dt;
            
            %             if(obj.xPos < 1 || obj.xPos > xyRange-1 || obj.yPos < 1 || obj.yPos > xyRange-1 )
            %                 obj.dir = 2*(pi-obj.dir);
            %             end
            
            
            obj.dir = rem(obj.dir, 2*pi);
            
            obj.dir
            
            dx = obj.v*cos(obj.dir);
            dy = obj.v*sin(obj.dir);
            
            if(obj.xPos < 1)
                dx = dx +1;
            end
            if(obj.xPos < xyRange -1 )
                dx = dx -1;
            end
            if(obj.yPos < 1)
                dy = dy +1;
            end
            if(obj.yPos < 1)
                dy = dy +1;
            end
            
            
            obj.xPos = obj.xPos + dx*dt;
            obj.yPos = obj.yPos + dy*dt;
            
            obj.vel = [dx; dy; 0]/norm([dx; dy; 0]);
            newPos = [obj.xPos obj.yPos];
            
        end
        
        function Tn = CalculateTorque(swimmer, otherSwimmer, rc, T0)
            
            Tn = 0;
            vn = swimmer.vel;
            xn = swimmer.xPos;
            yn = swimmer.yPos;
            
            for i = 1:numel(otherSwimmer)
                rni = CalcDist([swimmer.xPos swimmer.yPos], [otherSwimmer(i).xPos otherSwimmer(i).yPos]);
                
                if(rni < rc && rni ~= 0)
                    si = otherSwimmer(i);
                    rn = [si.xPos-xn si.yPos-yn 0];
                    dT = TorqueEq(vn, rn, T0);
                    Tn = Tn+dT;
                end
            end
            
            
        end
    end
end
